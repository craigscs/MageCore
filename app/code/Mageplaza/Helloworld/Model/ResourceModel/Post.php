<?php
/**
 * Mageplaza_HelloWorld extension
 *                     NOTICE OF LICENSE
 * 
 *                     This source file is subject to the Mageplaza License
 *                     that is bundled with this package in the file LICENSE.txt.
 *                     It is also available through the world-wide-web at this URL:
 *                     https://www.mageplaza.com/LICENSE.txt
 * 
 *                     @category  Mageplaza
 *                     @package   Mageplaza_HelloWorld
 *                     @copyright Copyright (c) 2016
 *                     @license   https://www.mageplaza.com/LICENSE.txt
 */
namespace Mageplaza\HelloWorld\Model\ResourceModel;

class Post extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
{
    /**
     * Date model
     *
     * @var \Magento\Framework\Stdlib\DateTime\DateTime
     */
    protected $_date;

    /**
     * constructor
     *
     * @param \Magento\Framework\Stdlib\DateTime\DateTime $date
     * @param \Magento\Framework\Model\ResourceModel\Db\Context $context
     */
    public function __construct(
        \Magento\Framework\Stdlib\DateTime\DateTime $date,
        \Magento\Framework\Model\ResourceModel\Db\Context $context
    )
    {
        $this->_date = $date;
        parent::__construct($context);
    }


    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('integrationui_profile', 'profile_id');
    }

    /**
     * Retrieves Post Name from DB by passed id.
     *
     * @param string $id
     * @return string|bool
     */
    public function getPostNameById($id)
    {
        $adapter = $this->getConnection();
        $select = $adapter->select()
            ->from($this->getMainTable(), 'name')
            ->where('profile_id = :profile_id');
        $binds = ['profile_id' => (int)$id];
        return $adapter->fetchOne($select, $binds);
    }
    /**
     * before save callback
     *
     * @param \Magento\Framework\Model\AbstractModel|\Mageplaza\HelloWorld\Model\Post $object
     * @return $this
     */
    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)
    {
        $object->setUpdatedAt($this->_date->date());
        if ($object->isObjectNew()) {
            $object->setCreatedAt($this->_date->date());
        }
        return parent::_beforeSave($object);
    }

    public function _afterLoad(\Magento\Framework\Model\AbstractModel $object)
    {
        $fm = $object->getFieldMapping();
        $um = $object->getUpdateMapping();
        $pre = $object->getPrefix();
        $fm = $this->makeArrayFieldValue($fm, $um, $pre);
        $object->setFieldMapping($fm);
//        var_dump($fm); die();
        $dv = $object->getData('default_values');
        $dv = $this->makeArrayFieldValue($dv);
        $object->setDefaultValues($dv);

        $fileInfo = unserialize($object->getData('file_info'));
        $fi = null;
        foreach ($fileInfo as $key => $value) {
            $fi['file_info[' . $key . ']'] = $value;
        }
        $object->setFileInfo($fi);

        $curlInfo = unserialize($object->getData('curl_info'));
        $curl = null;
        foreach ($curlInfo as $key => $value) {
            foreach ($curlInfo[$key] as $key2 => $value2){
                if ($value2) {
                    $curl['curl_info[' . $key . ']'][$key2] = $value2;
                }
            }
        }
        $object->setCurlInfo($curl);

        $soap = $object->getSoapInfo();
        $soapInfo = unserialize($soap);
        if ($soapInfo) {
            foreach ($soapInfo as $key => $value) {
                if (is_array($value)) {
                    foreach ($soapInfo[$key] as $key2 => $value2){
                        if ($value2) {
                            $data['soap_info[' . $key . ']'][$key2] = $value2;
                        }
                    }
                } else {
                    $data['soap_info[' . $key . ']'] = $value;
                }
            }
        }
        $object->setSoapInfo($data);
        return parent::_afterLoad($object); // TODO: Change the autogenerated stub
    }

    public function makeArrayFieldValue($value,$update = null,$prefix = null)
    {
        $value = $this->_unserializeValue($value);
        $update = $this->_unserializeValue($update);
        $prefix = $this->_unserializeValue($prefix);
        if (!$this->_isEncodedArrayFieldValue($value)) {
            $value = $this->_encodeArrayFieldValue($value,$update,$prefix);
        }
        return $value;
    }

    protected function _unserializeValue($value)
    {
        if (is_numeric($value)) {
            return array(
                32000 => $value
            );
        } else if (is_string($value) && !empty($value)) {
            return unserialize($value);
        } else {
            return array();
        }
    }

    protected function _isEncodedArrayFieldValue($value)
    {
        if (!is_array($value)) {
            return false;
        }
        unset($value['__empty']);
        foreach ($value as $_id => $row) {
            if (!is_array($row) || !array_key_exists('db_field', $row) || !array_key_exists('file_field', $row)) {
                return false;
            }
        }
        return true;
    }

    public function uniqHash($prefix = '')
    {
        return $prefix . md5(uniqid(microtime().mt_rand(), true));
    }

    protected function _encodeArrayFieldValue(array $value,array $update,array $prefix)
    {
        $result = array();
        foreach ($value as $groupId => $qty) {
            $_id = $this->uniqHash('_');
            $result[$_id] = array(
                'db_field' => $groupId,
                'file_field' => $qty,
            );
        }
        if (sizeof($update) > 0) {
            $new = array();
            foreach ($update as $groupId => $qty) {
                foreach ($result as $temp) {
                    if ($temp['db_field'] == $groupId) {
                        $_id = Mage::helper('core')->uniqHash('_');
                        $new[$_id] = array(
                            'db_field' => $temp['db_field'],
                            'file_field' => $temp['file_field'],
                            'new' => $qty,
                        );
                        break;
                    }
                }
            }
            $result = $new;
        }
        if (sizeof($prefix) > 0) {
            $new = array();
            foreach ($prefix as $groupId => $qty) {
                foreach ($result as $temp) {
                    if (!isset($temp['new'])) {
                        $temp['new'] = '';
                    }
                    if ($temp['db_field'] == $groupId) {
                        $_id = $this->uniqHash('_');
                        $new[$_id] = array(
                            'db_field' => $temp['db_field'],
                            'file_field' => $temp['file_field'],
                            'new' => $temp['new'],
                            'prefix' => $qty,
                        );
                        break;
                    }
                }
            }
            $result = $new;
        }
        return $result;
    }
}
